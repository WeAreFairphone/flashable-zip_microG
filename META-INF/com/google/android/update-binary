#!/sbin/sh

# Copyright 2013 Koushik Dutta, 2014 Ron Rieve
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# arg 1 is recovery api version, generally 3.
# arg 2 is the pipe fd, to the recovery binary.
# communicate with it using the recovery api.
# arg 3 is the zip file

echo -n -e 'ui_print Getting ready...\n' > /proc/self/fd/$2

WORK_FOLDER='microg'
ZIP_FILE="$3"
ADDOND='70-microg.sh'
PRIVAPP_PERMISSIONS='privapp-permissions-microg.xml'
SYSTEM_ROOT="/system"

cd /tmp
mkdir $WORK_FOLDER
cd $WORK_FOLDER
unzip -o "$ZIP_FILE"

if mount /system
then
  UMOUNT_FOLDER=/system
  # A/B system-as-root devices have the actual system partition
  # mounted under /system/system when in the recovery.
  # All Android 10 devices act as system-as-root devices.
  SYSTEM_AS_ROOT="$(getprop ro.build.system_root_image)"
  if [ "$SYSTEM_AS_ROOT" == "true" ]
  then # we are on an Android Pie device with A/B system-as-root layout
    SYSTEM_ROOT="/system/system"
  elif [ -f "/system/system/build.prop" ]
  then # we are on an Android 10 device
    SYSTEM_AS_ROOT="true"
    SYSTEM_ROOT="/system/system"
  fi
else
  mount /system_root || (echo -n -e 'ui_print Could not mount system_root...\n' > /proc/self/fd/$2; exit 1)
  UMOUNT_FOLDER=/system_root
  SYSTEM_ROOT="/system_root/system"
fi


echo -n -e 'ui_print Installing apps...\n' > /proc/self/fd/$2

# Prepare directory structure: change source according to target
BUILD_VERSION_SDK="$(grep -F ro.build.version.sdk ${SYSTEM_ROOT}/build.prop)"
BUILD_VERSION_SDK_INT="${BUILD_VERSION_SDK#*=}"
if [ "${BUILD_VERSION_SDK_INT}" -ge 21 ]
then # each apk has its own subdirectory in /system/priv-app or /system/app
  # Leave work folder as is
  true
elif [ "${BUILD_VERSION_SDK_INT}" -ge 19 ]
then # apks reside in /system/priv-app or /system/app
  find system/app -name *.apk -exec \
  mv {} system/app \;
  find system/priv-app -name *.apk -exec \
  mv {} system/priv-app \;

  find system/**/* -type d -exec \
  rm -rf {} \;
else # all apks reside in /system/app
  find system -name *.apk -exec \
  mv {} system/app \;

  find system/**/* -type d -exec \
  rm -rf {} \;
fi

TARGET_APKS="$(find system -name "*.apk" | sed -e 's|^system|'"${SYSTEM_ROOT}"'|')"
TARGET_DIRS="$(find system -mindepth 2 -type d | sed -e 's|^system|'"${SYSTEM_ROOT}"'|')"

# Copy new files and fix permissions
cp -r system/* ${SYSTEM_ROOT}/
echo -n "$TARGET_APKS" | xargs -n 1 chmod 644
echo -n "$TARGET_DIRS" | xargs -n 1 chmod 755


echo -n -e 'ui_print Installing OTA survival script...\n' > /proc/self/fd/$2
cp ${ADDOND} ${SYSTEM_ROOT}/addon.d/
chmod 755 ${SYSTEM_ROOT}/addon.d/${ADDOND}
echo -n -e 'ui_print Installed OTA survival script.\n' > /proc/self/fd/$2


if [ "${BUILD_VERSION_SDK_INT}" -ge 27 ]
then # Android 8+ require an explicit permission whitelist file for privileged apps
  echo -n -e 'ui_print Whitelisting privapp permissions...\n' > /proc/self/fd/$2
  cp ${PRIVAPP_PERMISSIONS} ${SYSTEM_ROOT}/etc/permissions/
  chmod 644 ${SYSTEM_ROOT}/etc/permissions/${PRIVAPP_PERMISSIONS}
fi

echo -n -e 'ui_print done\n' > /proc/self/fd/$2
echo -n -e 'ui_print\n' > /proc/self/fd/$2

umount $UMOUNT_FOLDER
